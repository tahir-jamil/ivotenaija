"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var _ = require("lodash");
var Subject_1 = require("rxjs/internal/Subject");
// import { LocalNotifications } from "nativescript-local-notifications";
var UserDataService = /** @class */ (function () {
    function UserDataService() {
        this.notificationEnable = true;
        this.currentLeadSource = new Subject_1.Subject();
        this.currentLeadUpdated$ = this.currentLeadSource.asObservable();
    }
    UserDataService.prototype.onchangeIndex = function (data) {
        this.currentLeadSource.next(data);
    };
    UserDataService.prototype.addUser = function (user) {
        if (user.complete == false) {
            if (this.findTaskUserData(user.id)) {
                return true;
            }
            else {
                this.uncompleteArray = JSON.parse(localStorage.getItem('InCompleted')) || []; // get array from localstorage
                this.uncompleteArray.push(user);
                localStorage.setItem('InCompleted', JSON.stringify(this.uncompleteArray)); // save updated array back to localstorage
            }
        }
        else {
            this.addAndRemoveUser(user);
        }
    };
    UserDataService.prototype.addAndRemoveUser = function (user) {
        if (this.findTask(user)) {
            var data = JSON.parse(localStorage.getItem('InCompleted')) || []; // get array from localstorage
            var index = _.findIndex(data, function (o) {
                return o.id == user.id;
            });
            ;
            data.splice(index, 1);
            localStorage.removeItem('InCompleted');
            localStorage.setItem('InCompleted', JSON.stringify(data)); // save updated array back to localstorage
        }
        else {
            console.log(" user not existe in uncompeted");
        }
        if (this.findTaskinComplete(user)) {
            return true;
        }
        else {
            this.completeArray = JSON.parse(localStorage.getItem('CompleatedDone')) || []; // get array from localstorage
            this.completeArray.push(user);
            localStorage.removeItem('CompleatedDone');
            localStorage.setItem('CompleatedDone', JSON.stringify(this.completeArray)); // save updated array back to localstorage
        }
    };
    UserDataService.prototype.removeCompleteUser = function (user) {
        if (this.findTaskinComplete(user)) {
            var data = JSON.parse(localStorage.getItem('CompleatedDone')) || []; // get array from localstorage
            var index = _.findIndex(data, function (o) {
                return (o.id == user.id && o.title == user.title) && (o.description == o.description);
            });
            ;
            data.splice(index, 1);
            localStorage.removeItem('CompleatedDone');
            localStorage.setItem('CompleatedDone', JSON.stringify(data)); // save updated array back to localstorage
        }
    };
    UserDataService.prototype.findTask = function (user) {
        this.uncompleteArray = JSON.parse(localStorage.getItem('InCompleted')) || []; // get array from localstorage
        var findItem = _.find(this.uncompleteArray, function (o) {
            return ((o.id === parseInt(user.id)));
        });
        if (findItem) {
            return findItem;
        }
        else {
            return {
                id: 0,
                title: "",
                description: "",
                startDate: Date,
                endDate: new Date(),
                complete: false
            };
        }
    };
    UserDataService.prototype.findTaskUserData = function (id) {
        var data = JSON.parse(localStorage.getItem('InCompleted')) || []; // get array from localstorage
        return _.find(data, function (o) {
            return o.id === parseInt(id);
        });
    };
    UserDataService.prototype.findTaskinComplete = function (user) {
        this.uncompleteArray = JSON.parse(localStorage.getItem('CompleatedDone')) || []; // get array from localstorage
        var findItem = _.find(this.uncompleteArray, function (o) {
            return ((o.id === parseInt(user.id)));
        });
        return findItem;
    };
    UserDataService.prototype.findTaskObj = function (id) {
        var data = JSON.parse(localStorage.getItem('InCompleted')) || []; // get array from localstorage
        var obj = _.filter(data, function (o) {
            return o.id == parseInt(id);
        });
        return obj[0];
    };
    UserDataService.prototype.findTaskObjComplete = function (id) {
        var data = JSON.parse(localStorage.getItem('CompleatedDone')) || []; // get array from localstorage
        var obj = _.filter(data, function (o) {
            return o.id == parseInt(id);
        });
        return obj[0];
    };
    UserDataService.prototype.getCompleteArray = function () {
        return JSON.parse(localStorage.getItem('CompleatedDone')) || []; // get array from localstorage
    };
    UserDataService.prototype.getUnCompleteArray = function () {
        return JSON.parse(localStorage.getItem('InCompleted')) || []; // get array from localstorage
    };
    UserDataService.prototype.getTotalId = function () {
        if (JSON.parse(localStorage.getItem('InCompleted')) == null) {
            return 0;
        }
        else {
            return JSON.parse(localStorage.getItem('InCompleted')).length + 1;
        }
    };
    UserDataService.prototype.localNotification = function (message) {
        // if (this.notificationEnable == true) {
        //   LocalNotifications.requestPermission().then(granted => {
        //     if (granted) {
        //       LocalNotifications.schedule([{
        //         title: message.title,
        //         body: message.body,
        //         // forceShowWhenInForeground: true,
        //         icon: "res://logo"
        //       }]).then(() => {
        //         console.log("local notification working");
        //       }, error => {
        //         console.dir(error);
        //       });
        //     }
        //   });
        // }
    };
    UserDataService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [])
    ], UserDataService);
    return UserDataService;
}());
exports.UserDataService = UserDataService;
//# sourceMappingURL=data:application/json;base64,